datasource db {
  provider = "postgresql"
  url      = env("DB_TEST_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Document {
  id                String              @id @default(uuid())
  serial            Int                 @unique @default(autoincrement())
  cdnUrl            String
  createdAt         DateTime            @default(now())
  fileName          String
  fileSize          Int
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
  localPath         String
  mimeType          String
  ownerId           String
  owner             DocumentOwner
  status            DocumentStatus      @default(PENDING)
  type              DocumentType
  updatedAt         DateTime            @updatedAt
}

// Document Statuses
enum DocumentStatus {
  APPROVED
  PENDING
  REJECTED
}

// Document owner type
enum DocumentOwner {
  USER
  LISTING
  VERIFICATION
}
 // Document type
enum DocumentType {
  IMAGE
  DOCX
  PDF
  VIDEO
}

// Chatroom
model Chatroom {
  id                String              @id @default(uuid())
  serial            Int                 @unique @default(autoincrement())
  createdAt         DateTime            @default(now())
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
  name              String
  messages          Message[]
  participants      User[]              @relation("ChatroomParticipants", onDelete: Cascade)
  type              ChatroomType        @default(PRIVATE)
  updatedAt         DateTime            @updatedAt
  webClientId       String?
}


// Chatroom type
enum ChatroomType {
  GROUP
  PRIVATE
}

model Message {
  id                String              @id @default(uuid())
  serial            Int                 @unique @default(autoincrement())
  chatroom          Chatroom            @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId        String
  createdAt         DateTime            @default(now())
  isDelivered       Boolean             @default(false)
  isRead            Boolean             @default(false)
  isSent            Boolean             @default(false)
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
  sender            User                @relation(fields: [userId], references:[id])
  updatedAt         DateTime            @updatedAt
  userId            String
}


model User {
  id                String              @id @default(uuid())
  serial            Int                 @unique @default(autoincrement())
  avatar            Document?           @relation(fields: [avatarId], references: [id], onDelete: Cascade)
  avatarId          String?
  chatRooms         ChatRoom[]          @relation("ChatroomParticipants", onDelete: Cascade)
  createdAt         DateTime            @default(now())
  email             String              @unique
  firstName         String
  lastName          String
  isDeleted         Boolean             @default(false)
  deletedAt         DateTime?
  isVerified        Boolean             @default(false)
  landlords         Landlord[]
  favourites        Like[]
  listings          Listing[]
  notifications     Notification[]
  passwordHash      String
  passwordSalt      String
  phone             String
  recommendations   Recommendation[]
  rentals           Rental[]            @relation("UserRentals", onDelete: Cascade)
  reviews           Review[]
  role              UserRole            @default(USER)
  updatedAt         DateTime            @updatedAt
}


// User roles
enum UserRole {
  ADMIN
  AGENT
  LANDLORD
  USER
}
