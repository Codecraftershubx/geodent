datasource db {
  provider = "postgresql"
  url      = env("DB_DEV_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

model Address {
  id        String    @id @default(uuid())
  serial    Int       @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  number    Int?
  poBox     Int?
  zip       String
  street    String
  latitude  Float?
  longitude Float?
  flat      Flat?
  user      User?
  school    School?
  campus    Campus?
  room      Room?
  block     Block?
}

model Document {
  id             String        @id @default(uuid())
  serial         Int           @unique @default(autoincrement())
  cdnUrl         String?
  createdAt      DateTime      @default(now())
  fileName       String
  fileSize       Int
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  localPath      String
  mimeType       String
  chatroomId     String?
  userId         String?
  listingId      String?
  verificationId String?
  roomId         String?
  flatId         String?
  blockId        String?
  schoolId       String?
  campusId       String?
  cityId         String?
  countryId      String?
  stateId        String?
  owner          DocumentOwner
  chatroom       Chatroom?     @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  listing        Listing?      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  verification   Verification? @relation(fields: [verificationId], references: [id], onDelete: Cascade)
  room           Room?         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  flat           Flat?         @relation(fields: [flatId], references: [id], onDelete: Cascade)
  block          Block?        @relation(fields: [blockId], references: [id], onDelete: Cascade)
  school         School?       @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  campus         Campus?       @relation(fields: [campusId], references: [id], onDelete: Cascade)
  city           City?         @relation(fields: [cityId], references: [id], onDelete: Cascade)
  country        Country?      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  state          State?        @relation(fields: [stateId], references: [id], onDelete: Cascade)
  updatedAt      DateTime      @updatedAt
}

// Document owner type
enum DocumentOwner {
  CHATROOM
  USER
  LISTING
  VERIFICATION
  ROOM
  FLAT
  BLOCK
  SCHOOL
  CAMPUS
  CITY
  COUNTRY
  STATE
}

model Chatroom {
  id           String       @id @default(uuid())
  serial       Int          @unique @default(autoincrement())
  createdAt    DateTime     @default(now())
  isDeleted    Boolean      @default(false)
  deletedAt    DateTime?
  name         String
  messages     Message[]
  documents    Document[]
  participants User[]       @relation("ChatroomParticipants")
  type         ChatroomType @default(PRIVATE)
  updatedAt    DateTime     @updatedAt
  webClientId  String?
}

// Chatroom type
enum ChatroomType {
  GROUP
  PRIVATE
}

model Message {
  id          String    @id @default(uuid())
  serial      Int       @unique @default(autoincrement())
  content     String
  chatroom    Chatroom  @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId  String
  createdAt   DateTime  @default(now())
  isDelivered Boolean   @default(false)
  isRead      Boolean   @default(false)
  isSent      Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  sender      User      @relation(fields: [userId], references: [id])
  updatedAt   DateTime  @updatedAt
 userId      String
}

model User {
  id              String         @id @default(uuid())
  serial          Int            @unique @default(autoincrement())
  documents       Document[]
  refreshToken    String?
  isAdmin         Boolean        @default(false)
  chatrooms       Chatroom[]     @relation("ChatroomParticipants")
  createdAt       DateTime       @default(now())
  email           String         @unique
  addressId       String?        @unique
  address         Address?       @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  firstName       String
  lastName        String
  isDeleted       Boolean        @default(false)
  deletedAt       DateTime?
  emailVerified   Boolean        @default(false)
  likes           Like[]         @relation()
  likedBy         Like[]         @relation("UserLikesReceived")
  listings        Listing[]
  notifications   Notification[]
  password        String
  phone           String?
  tenancy         Rental[]       @relation("TenantRentals")
  rentals         Rental[]       @relation("LandlordRentals")
  reviews         Review[]
  receivedReviews Review[]       @relation("ReceivedReviews")
  role            UserRole       @default(USER)
  updatedAt       DateTime       @updatedAt
  messages        Message[]
  rooms           Room[]
  flats           Flat[]
  verifications   Verification[]
}

// User roles
enum UserRole {
  AGENT
  LANDLORD
  USER
}

// Countries
model Country {
  id           String     @id @default(uuid())
  serial       Int        @unique @default(autoincrement())
  name         String     @unique
  aka          String?
  alpha2Code   String     @unique
  alpha3Code   String     @unique
  createdAt    DateTime   @default(now())
  currency     String
  currencyCode String
  numericCode  String     @unique
  states       State[]
  listings     Listing[]
  documents    Document[]
  updatedAt    DateTime   @updatedAt
  schools      School[]
  isDeleted    Boolean    @default(false)
  deletedAt    DateTime?
}

// States
model State {
  id          String     @id @default(uuid())
  serial      Int        @unique @default(autoincrement())
  alpha2Code  String     @unique
  alpha3Code  String     @unique
  cities      City[]
  country     Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId   String
  createdAt   DateTime   @default(now())
  name        String
  numericCode String     @unique
  updatedAt   DateTime   @updatedAt
  schools     School[]
  documents   Document[]
  listings    Listing[]
  isDeleted   Boolean    @default(false)
  deletedAt   DateTime?

  @@unique(fields: [countryId, name])
}

// Cities
model City {
  id        String     @id @default(uuid())
  serial    Int        @unique @default(autoincrement())
  listings  Listing[]
  name      String     @unique
  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId   String
  createdAt DateTime   @default(now())
  schools   School[]
  documents Document[]
  updatedAt DateTime   @updatedAt
  isDeleted Boolean    @default(false)
  deletedAt DateTime?

  @@unique(fields: [name, stateId])
}

// Schools
model School {
  id          String     @id @default(uuid())
  serial      Int        @default(autoincrement())
  name        String
  description String?
  type        SchoolType
  addressId   String?    @unique
  address     Address?   @relation(fields: [addressId], references: [id], onDelete: Cascade)
  campuses    Campus[]
  documents   Document[]
  listings    Listing[]
  state       State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  country     Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  stateId     String
  countryId   String
  isDeleted   Boolean    @default(false)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  city        City       @relation(fields: [cityId], references: [id])
  cityId      String
}

//
enum SchoolType {
  COLLEGE
  POLYTECHNIC
  UNIVERSITY
}

// Campuses
model Campus {
  id     String @id @default(uuid())
  serial Int    @unique @default(autoincrement())

  name        String
  type        CampusType
  addressId   String?    @unique
  address     Address?   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description String?
  school      School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId    String
  isDeleted   Boolean    @default(false)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  listings    Listing[]
  documents   Document[]
}

// Campus Type
enum CampusType {
  MAIN
  ANNEX
}

// Room
model Room {
  id           String  @id @default(uuid())
  serial       Int     @unique @default(autoincrement())
  number       Int     @default(1)
  width        Decimal @db.Decimal(4, 2)
  length       Decimal @db.Decimal(4, 2)
  breadth      Decimal @db.Decimal(4, 2)
  isLivingArea Boolean @default(false)
  isStandAlone Boolean @default(true)
  isAvailable  Boolean @default(true)
  flatId       String?
  blockId      String?
  listingId    String?
  userId       String
  addressId    String? @unique

  // relationships
  amenities Amenity[] @relation("RoomsAmenities")
  listing   Listing?  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  flat      Flat?     @relation(fields: [flatId], references: [id], onDelete: Cascade)
  block     Block?    @relation(fields: [blockId], references: [id], onDelete: Cascade)
  landlord  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]
  address   Address?  @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // others
  isDeleted Boolean    @default(false)
  deletedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  documents Document[]
}

// Flat
model Flat {
  id           String   @id @default(uuid())
  serial       Int      @unique @default(autoincrement())
  number       Int
  userId       String
  addressId    String?  @unique
  blockId      String?
  listingId    String
  isStandAlone Boolean  @default(true)
  isComposite  Boolean  @default(true)
  isAvailable  Boolean?

  // relationships
  address   Address?   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rooms     Room[]
  listing   Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)
  block     Block?     @relation(fields: [blockId], references: [id], onDelete: Cascade)
  amenities Amenity[]  @relation("FlatsAmenities")
  tags      Tag[]
  documents Document[]
  landlord  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // others
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Block
model Block {
  id          String    @id @default(uuid())
  serial      Int       @unique @default(autoincrement())
  type        BlockType
  isComposite Boolean   @default(false)
  listingId   String?
  isAvailable Boolean?
  addressId   String?   @unique

  // relationships
  address   Address?   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  flats     Flat[]
  rooms     Room[]
  amenities Amenity[]  @relation("BlocksAmenities")
  listing   Listing?   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  document  Document[]

  // others
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Block Type
enum BlockType {
  FLATS
  MIXED
  ROOMS
}

// Listing
model Listing {
  id          String        @id @default(uuid())
  serial      Int           @unique @default(autoincrement())
  shortDescr  String
  longDescr   String?
  name        String
  type        ListingType
  price       Decimal?      @db.Decimal(20, 2)
  isAvailable Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  shares      Int           @default(0)
  shareUrl    String
  documents   Document[]
  proximity   ProximityType @default(IN)

  // relationships
  amenities Amenity[] @relation("ListingsAmenities")
  campus    Campus    @relation(fields: [campusId], references: [id], onDelete: Cascade)
  city      City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  state     State     @relation(fields: [stateId], references: [id], onDelete: Cascade)
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  campusId  String
  cityId    String
  countryId String
  stateId   String
  likes     Like[]    @relation("LikedListings")
  reviews   Review[]
  tenants   Rental[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  schoolId  String
  school    School    @relation(fields: [schoolId], references: [id])
  rooms     Room[]
  flats     Flat[]
  blocks    Block[]
}

// ProximityType:
enum ProximityType {
  IN
  NEAR
}

// Listing Types
enum ListingType {
  STUDIO
  SELF_CONTAINED
  FLAT
  BLOCK
}

// Likes
model Like {
  id        String     @id @default(uuid())
  serial    Int        @unique @default(autoincrement())
  target    LikeTarget
  likerId   String
  listingId String
  userId    String
  liker     User       @relation(fields: [likerId], references: [id], onDelete: Cascade)
  user      User?      @relation("UserLikesReceived", fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing?   @relation("LikedListings", fields: [listingId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// like target
enum LikeTarget {
  LISTING
  USER
}

// reviews
model Review {
  id         String       @id @default(uuid())
  serial     Int          @unique @default(autoincrement())
  rating     Int          @default(1)
  message    String
  reviewerId String
  reviewer   User         @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  target     ReviewTarget
  userId     String
  listingId  String
  user       User?        @relation("ReceivedReviews", fields: [userId], references: [id], onDelete: Cascade)
  listing    Listing?     @relation(fields: [listingId], references: [id], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  isDeleted  Boolean      @default(false)
  deletedAt  DateTime?
}

enum ReviewTarget {
  AGENT
  LANDLORD
  LISTING
}

// Amenities
model Amenity {
  id          String    @id @default(uuid())
  serial      Int       @default(autoincrement())
  name        String
  description String?
  listings    Listing[] @relation("ListingsAmenities")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  // relationships
  flats  Flat[]  @relation("FlatsAmenities")
  blocks Block[] @relation("BlocksAmenities")
  rooms  Room[]  @relation("RoomsAmenities")
}

// Tags
model Tag {
  id          String    @id @default(uuid())
  serial      Int       @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  room        Room?     @relation(fields: [roomId], references: [id])
  roomId      String?
  flat        Flat?     @relation(fields: [flatId], references: [id])
  flatId      String?
}

// Verifications
model Verification {
  id         String             @id @default(uuid())
  serial     Int                @unique @default(autoincrement())
  documents  Document[]
  status     VerificationStatus
  reason     String?
  reviewerId String
  reviewer   User               @relation(fields: [reviewerId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  isDeleted  Boolean            @default(false)
  deletedAt  DateTime?
}

enum VerificationStatus {
  APPROVED
  PENDING
  REJECTED
}

// Rentals
model Rental {
  id               String   @id @default(uuid())
  serial           Int      @unique @default(autoincrement())
  listingId        String
  landlordId       String
  tenants          User[]   @relation("TenantRentals")
  listing          Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  landlord         User     @relation("LandlordRentals", fields: [landlordId], references: [id], onDelete: Cascade)
  amountPaid       Decimal  @db.Decimal(10, 2)
  priceIsDifferent Boolean  @default(false)
  reason           String?
  startsAt         DateTime
  endsAt           DateTime
  isDeleted         Boolean @default(false)
  deletedAt         DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Notifications
model Notification {
  id         String       @id @default(uuid())
  serial     Int          @unique @default(autoincrement())
  receiverId String
  message    String
  type       ReceiverType
  receiver   User         @relation(fields: [receiverId], references: [id])
  isRead     Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

// ReceiverType
enum ReceiverType {
  USER
  ADMIN
 }
